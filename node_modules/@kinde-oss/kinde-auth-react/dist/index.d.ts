/// <reference types="react" />
import createKindeClient from '@kinde-oss/kinde-auth-pkce-js';
import react from 'react';

type KindeUser = {
    given_name: string | null;
    id: string | null;
    family_name: string | null;
    email: string | null;
};
type State = {
    user?: KindeUser;
    isLoading: boolean;
    isAuthenticated: boolean;
    error?: string | undefined;
};

type KindeClient = Awaited<ReturnType<typeof createKindeClient>>;
interface KindeContextProps extends State {
    login: KindeClient['login'];
    register: KindeClient['register'];
    logout: KindeClient['logout'];
    createOrg: KindeClient['createOrg'];
    getClaim: KindeClient['getClaim'];
    getPermissions: KindeClient['getPermissions'];
    getPermission: KindeClient['getPermission'];
    getOrganization: KindeClient['getOrganization'];
    getUserOrganizations: KindeClient['getUserOrganizations'];
}

declare const useKindeAuth: () => KindeContextProps;

type KindeProviderProps = {
    audience: string;
    scope: string;
    clientId: string;
    domain: string;
    logoutUri: string;
    redirectUri: string;
    children: react.ReactNode;
    isDangerouslyUseLocalStorage?: boolean;
    onRedirectCallback?: () => void;
};
declare const KindeProvider: ({ audience, scope, clientId, children, domain, isDangerouslyUseLocalStorage, redirectUri, onRedirectCallback, logoutUri }: KindeProviderProps) => JSX.Element;

export { KindeProvider, useKindeAuth };
